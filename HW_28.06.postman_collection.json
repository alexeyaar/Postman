```json
{
	"info": {
		"_postman_id": "4ac9d2e3-d580-4068-8805-a38724083d30",
		"name": "HW 28.06",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16553303"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//статус 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//отправить запрос \r",
							"\r",
							"\r",
							"pm.sendRequest (\"https://postman-echo.com/get\")\r",
							"//статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//спарсить response в json\r",
							"\r",
							"let respJson = pm.response.json()\r",
							"console.log(respJson)\r",
							"\r",
							"//прорверить имя в ответе с именем в запросе \r",
							"\r",
							"let req = request.data;\r",
							"let respname = respJson.name;\r",
							"let reqname = request.data.name;\r",
							"pm.test(\"Tets_Name\", function () {\r",
							"    pm.expect(respname).to.eql(reqname);\r",
							"});\r",
							"//прорверить возраст в ответе с возрастом в запросе\r",
							"let respage = respJson.age;\r",
							"let reqage = request.data.age \r",
							"pm.test(\"Test_Age\", function () {\r",
							"    pm.expect(reqage).to.eql(respage);\r",
							"});\r",
							"\r",
							"// прорверить зарплату в ответе с зарплатой в запросе\r",
							"\r",
							"let respsalary = Number(respJson.salary) ;\r",
							"let reqsalary = Number(request.data.salary) ;\r",
							"pm.test(\"TestSalary0\", function () {\r",
							"    pm.expect(respsalary).to.eql(reqsalary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(respJson.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let sal1_5 = reqsalary * 4;\r",
							"let respsal = respJson.family.u_salary_1_5_year;\r",
							" pm.test(\"Test_Salary 1\", function () {\r",
							"    pm.expect(respsal).to.eql(sal1_5);\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"\r",
							"let repbody = pm.response.json ()\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"let nresp = repbody.name \r",
							"let nreq = 'Alex'\r",
							"pm.test(\"Name req=name resp\", function () {\r",
							"    pm.expect(nresp).to.eql(nreq);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"let aresp = repbody.age\r",
							"let areq = '27'\r",
							"pm.test(\"Age resp = Age req\" , function () {\r",
							"    pm.expect(aresp).to.eql(areq);});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"let sresp = repbody.salary \r",
							"let sreq = 1000000\r",
							"pm.test(\"Salary  resp = Salary req\" , function () {\r",
							"   pm.expect(sresp).to.eql(sreq);});\r",
							"\r",
							"// Спарсить request.\r",
							"let req1 = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let n2req = req1.name\r",
							"pm.test(\"Name req=name resp\", function () {\r",
							"    pm.expect(nresp).to.eql(n2req)});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let a2req = req1.age \r",
							"pm.test(\"Age resp = Age req\" , function () {\r",
							"    pm.expect(aresp).to.eql(a2req);});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let s2req = Number (req1.salary)\r",
							"pm.test(\"Salary  resp = Salary req\" , function () {\r",
							"   pm.expect(sresp).to.eql(s2req);});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(repbody.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let s1_5 = req1.salary * 4;\r",
							"let us1_15 = repbody.family.u_salary_1_5_year;\r",
							"pm.test(\"Salary1.5 = Salary *4\" , function () {\r",
							"   pm.expect(s1_5).to.eql(us1_15);});\r",
							"\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dogs name\", function () {   \r",
							"    pm.expect(repbody.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Dogs age\", function () {   \r",
							"    pm.expect(repbody.family.pets.dog.age).to.eql(4);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=27&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object info 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"\r",
							"let resp = JSON.parse(responseBody);\r",
							"\r",
							"//Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let responsename = resp.name\r",
							"let requestname = req.name\r",
							"pm.test(\"request name = response name\", function () {\r",
							"    pm.expect(responsename).to.eql(requestname);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let ageresponse = Number (resp.age)\r",
							"let agerequest = Number(req.age)\r",
							"pm.test(\"request age = response age\", function () {\r",
							"    pm.expect(ageresponse).to.eql(agerequest);\r",
							"    });\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log (resp.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log (resp.salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log (resp.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log (resp.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let salq0 = Number(resp.salary[0])\r",
							"let sals0 = Number(req.salary)\r",
							"pm.test(\"Equals salary0\", function(){\r",
							"pm.expect(salq0).to.eql(sals0)\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let salq1 = Number(resp.salary[1])\r",
							"let sals1 = Number(req.salary*2)\r",
							"pm.test(\"Equals salary1\", function(){\r",
							"pm.expect(salq1).to.eql(sals1)\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let salq2 = Number(resp.salary[2])\r",
							"let sals2 = Number(req.salary*3)\r",
							"pm.test(\"Equals salary2\", function(){\r",
							"pm.expect(salq2).to.eql(sals2)\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"\r",
							"pm.environment.set('name');\r",
							"//Создать в окружении переменную age\r",
							"\r",
							"pm.environment.set('age');\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"\r",
							"pm.environment.set('salary');\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set('name',responsename)\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set('age',ageresponse );\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set('salary' ,salq0);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=27&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user info 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Сатутс код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"\r",
							"let res = JSON.parse(responseBody)\r",
							"console.log (res)\r",
							"\r",
							"//Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"let stqs = res ['start_qa_salary']\r",
							"\r",
							"//console.log (stqs)\r",
							"\r",
							"pm.test(\"Have start_qa_salary\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"pm.test(\"have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"have person\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let sal = Number (req.salary) \r",
							"let ssal = Number (res.start_qa_salary)\r",
							"pm.test(\"Salary = qa start salary \", function () {\r",
							"    pm.expect(sal).to.eql(ssal);\r",
							"});\r",
							"\r",
							"//. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let sal6 = res.qa_salary_after_6_months\r",
							"pm.test(\"Salary = qa 6month salary \", function () {\r",
							"    pm.expect(sal*2).to.eql(sal6);}\r",
							"    );\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"let sal12 = res.qa_salary_after_12_months\r",
							"pm.test('Salary after 12 month = salary *2.7' , function (){\r",
							"    pm.expect(sal*2.7).to.eql(sal12)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"let sal1_5 = res ['qa_salary_after_1.5_year']\r",
							"pm.test('Salary after 3.5 year = salary *3.3' , function (){\r",
							"    pm.expect(sal*3.3).to.eql(sal1_5)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"let sal3_5 = res['qa_salary_after_3.5_years']\r",
							"pm.test('Salary after 3.5 years= salary *2.7' , function (){\r",
							"    pm.expect(sal*3.8).to.eql(sal3_5)});\r",
							"\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"let per =res.person.u_name[1]\r",
							"pm.test('Salary person' , function (){\r",
							"    pm.expect(sal).to.eql(per)});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"let ager = Number(res.person.u_age)\r",
							"let ageq =Number (req.age)\r",
							"pm.test('age request = age response' , function (){\r",
							"    pm.expect(ager).to.eql(ageq)});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let sal5 = res.person.u_salary_5_years\r",
							"pm.test('Salary after 5 years= salary *4.2' , function (){\r",
							"    pm.expect(sal*4.2).to.eql(sal5)});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}
```json
